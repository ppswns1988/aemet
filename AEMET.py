from datetime import datetime
import pandas as pd
import numpy as np
import matplotlib as plt
import matplotlib.pyplot as plt
import plotly.graph_objects as go
from streamlit_folium import st_folium
import folium
import streamlit as st
from functools import lru_cache
import plotly.express as px
from PIL import Image
#from sklearn.preprocessing import MinMaxScaler
from prophet import Prophet
from concurrent.futures import ThreadPoolExecutor
from joblib import load
import joblib
import mysql.connector
import json
import os
from matplotlib.dates import date2num
import matplotlib.dates as mdates


def main():
    st.set_page_config(page_title="An√°lisis Climatol√≥gico", layout="wide")

    database_password = st.secrets["database_password"]

    def consulta_sql(query):

        database = "AEMET"
        db = mysql.connector.connect(
            host="localhost",
            user="root",
            password=st.secrets["database_password"],
            database=database
        )

        cursor = db.cursor()
        cursor.execute(query)

        # Obtiene los datos
        data = cursor.fetchall()
        columns = [col[0] for col in cursor.description]  # Nombres de las columnas
        cursor.close()
        db.close()

        # Convierte los datos en un DataFrame de pandas
        return pd.DataFrame(data, columns=columns)

    menu = ['Inicio', 'Valores climatol√≥gicos por comunidad y provincia', 'Comparador de valores climatol√≥gicos',
            'Mapa coropl√©tico', 'Predicci√≥n del tiempo', 'Facebook Prophet', 'Diagrama MYSQL: Base de datos',
            'About us']

    choice = st.sidebar.selectbox("Selecciona una opci√≥n", menu, key="menu_selectbox_unique")

    if choice == "Inicio":
        st.markdown(
            """
            <div style="text-align: center;">
                <img src="https://facuso.es/wp-content/uploads/2023/09/6de3b76f2eeed4e2edfa5420ad9630bd.jpg" 
                     alt="Imagen oficial de la AEMET" 
                     width="250">
                <p>Imagen oficial de la AEMET</p>
            </div>
            """,
            unsafe_allow_html=True
        )

        # Introducci√≥n
        st.markdown(
            "##### Bienvenido/a a la plataforma de exploraci√≥n de datos de la AEMET (Agencia Estatal Meteorol√≥gica de Espa√±a).")

        st.markdown(
            "##### Espa√±a, con su diversidad clim√°tica y variada geograf√≠a, ofrece un rico panorama meteorol√≥gico en donde te encontrar√°s con temperaturas muy dispersas entre ellas en varios puntos geogr√°fico. ")
        st.markdown("A tu izquierda encontrar√°s varias secciones, en donde cada apartado tendr√° una breve introducci√≥n")
        st.markdown(
            "En este sitio, podr√°s explorar y comparar datos hist√≥ricos desde 2014 para obtener una visi√≥n profunda del clima en nuestro pa√≠s.")

        # Crear 3 columnas para las im√°genes
        col1, col2, col3 = st.columns(3)

        # A√±adir im√°genes a cada columna con un tama√±o mayor
        with col1:
            st.image(
                "https://i.pinimg.com/originals/73/93/14/739314e72faa8f68bc12a29dcf0ce07c.jpg",
                caption="Ordesa y Monte Perdido",
                width=250  # Ajusta el ancho seg√∫n sea necesario
            )
            st.image(
                "https://fascinatingspain.com/wp-content/uploads/benasque_nieve.jpg",
                caption="Benasque",
                width=250  # Ajusta el ancho seg√∫n sea necesario
            )

        with col2:
            st.image(
                "https://www.viajes.com/blog/wp-content/uploads/2021/09/sea-6580532_1920.jpg",
                caption="Galicia, tierra de Meigas",
                width=250  # Ajusta el ancho seg√∫n sea necesario
            )
            st.image(
                "https://i.pinimg.com/originals/cd/14/c8/cd14c8b90c06f714899d0d17e7d7fcd4.jpg",
                caption="Mallorca, Cala Egos - Cala d'Or",
                width=250  # Ajusta el ancho seg√∫n sea necesario
            )

        with col3:
            st.image(
                "https://palenciaturismo.es/system/files/Monta%C3%B1aPalentinaGaleria5.jpg",
                caption="Palencia",
                width=250  # Ajusta el ancho seg√∫n sea necesario
            )
            st.image(
                "https://i.pinimg.com/originals/d8/3a/f2/d83af2c8d615f0a8393ef3eeb9325435.jpg",
                caption="Asturias",
                width=250  # Ajusta el ancho seg√∫n sea necesario
            )

    if choice == "Valores climatol√≥gicos por comunidad y provincia":

        # T√≠tulo de la aplicaci√≥n
        st.title("üåü **An√°lisis Climatol√≥gico Interactivo por Ciudad** üå§Ô∏è")

        # Descripci√≥n de la aplicaci√≥n
        st.markdown("""
        ### üèôÔ∏è **Explora el Clima en Profundidad** üåç

        Bienvenido al **An√°lisis Climatol√≥gico Interactivo**, donde podr√°s descubrir c√≥mo ha evolucionado el clima en diferentes **ciudades** de **Espa√±a** a lo largo del tiempo. üå¶Ô∏è

        Selecciona una **ciudad** y un **rango de fechas** para visualizar datos detallados sobre las **temperaturas promedio**, **m√°ximas y m√≠nimas**, **precipitaci√≥n**, **viento**, **altitud**, **humedad** y m√°s. üìä

        üîç **¬øQu√© puedes explorar aqu√≠?**  
        - **Temperaturas media, m√°xima y m√≠nima** a lo largo del tiempo üå°Ô∏è  
        - **Precipitaci√≥n acumulada** (lluvias y otras condiciones meteorol√≥gicas) üåßÔ∏è  
        - **Velocidad y direcci√≥n del viento** üå¨Ô∏è  
        - **Altitud** de la ciudad y su relaci√≥n con el clima ‚õ∞Ô∏è
        - **An√°lisis visual** mediante gr√°ficos interactivos üìà

        ¬°Comienza a explorar el clima de tu ciudad favorita! üèôÔ∏èüå¶Ô∏è
        """)

        # Consulta de las ciudades disponibles
        ciudades_query = "SELECT * FROM ciudades"
        ciudades_df = consulta_sql(ciudades_query)

        # Secci√≥n de selecci√≥n de par√°metros
        with st.container():


            col1, col2, col3 = st.columns([1, 1, 1])

            # Secci√≥n de selecci√≥n de par√°metros
            with col1:

                ciudad_seleccionada = st.selectbox("üåÜ Selecciona una ciudad", ciudades_df['ciudad'].tolist())
                st.write(f"**Datos clim√°ticos para:** {ciudad_seleccionada}")
                ciudad_id = ciudades_df.loc[ciudades_df['ciudad'] == ciudad_seleccionada, 'ciudad_id'].values[0]
                # Obtener provincia_id de la ciudad seleccionada
                ciudad_info_query = f"""
                    SELECT p.provincia_id, c.ciudad_id, c.ciudad
                    FROM ciudades c
                    JOIN provincias p ON c.ciudad_id = p.provincia_id
                    WHERE c.ciudad = '{ciudad_seleccionada}'
                """

                ciudad_info = consulta_sql(ciudad_info_query)

                # Verificar si la consulta devuelve resultados
                if not ciudad_info.empty:
                    provincia_id = ciudad_info['provincia_id'].values[0]
                    ciudad_id = ciudad_info['ciudad_id'].values[0]
                    ciudad = ciudad_info['ciudad'].values[0]
                    st.write(f"**Provincia ID**: {provincia_id} - **Ciudad ID**: {ciudad_id} - **Ciudad**: {ciudad}")
                else:
                    st.warning(f"No se encontraron datos para la ciudad '{ciudad_seleccionada}'.")

                # Obtener nombre de la provincia

                provincia_info_query = f"""
                    SELECT provincia
                    FROM provincias
                    WHERE provincia_id = {provincia_id}
                """
                provincia_info = consulta_sql(provincia_info_query)
                provincia = provincia_info['provincia'].values[0]

                # Mostrar la comunidad y la provincia
                st.write(f"üåç üìç **Provincia**: {provincia}")

            with col2:
                fecha_inicio = st.date_input("üìÖ Fecha de inicio:", value=datetime(2014, 1, 1))

            with col3:
                fecha_fin = st.date_input("üìÖ Fecha de fin:", value=datetime(2024, 10, 31))

        # Consulta de datos clim√°ticos
                query= f"""
                SELECT fecha, tmed, tmax, tmin, prec, velemedia, dir, hrMedia, altitud, hrMax, hrMin
                FROM valores_climatologicos
                WHERE ciudad_id = {ciudad_id} AND fecha BETWEEN '{fecha_inicio}' AND '{fecha_fin}'
            """
            datos_climaticos_df = consulta_sql(query)
            st.dataframe(datos_climaticos_df)
        # Comprobaci√≥n si hay datos
        if not datos_climaticos_df.empty:
            st.subheader("üìä Datos Clim√°ticos")
            st.dataframe(datos_climaticos_df, use_container_width=True)

            # Gr√°ficos interactivos
            with st.container():
                st.markdown("### üå°Ô∏è Visualizaci√≥n General")
                col1, col2 = st.columns(2)

                # Gr√°fico de Temperatura Media
                with col1:
                    st.markdown("#### üìà Temperatura Media")
                    fig_temp = go.Figure(go.Scatter(
                        x=datos_climaticos_df['fecha'],
                        y=datos_climaticos_df['tmed'],
                        mode='lines',
                        line=dict(color='red'),
                        name='Temperatura Media'
                    ))
                    fig_temp.update_layout(title="Temperatura Media", xaxis_title="Fecha", yaxis_title="¬∞C")
                    st.plotly_chart(fig_temp, use_container_width=True)

                # Gr√°fico de Velocidad del Viento
                with col2:
                    st.markdown("#### üí® Velocidad del Viento")
                    fig_wind = go.Figure(go.Scatter(
                        x=datos_climaticos_df['fecha'],
                        y=datos_climaticos_df['velemedia'],
                        mode='lines',
                        line=dict(color='green'),
                        name='Velocidad del Viento'
                    ))
                    fig_wind.update_layout(title="Velocidad Media del Viento", xaxis_title="Fecha", yaxis_title="km/h")
                    st.plotly_chart(fig_wind, use_container_width=True)

            with st.container():
                col3, col4 = st.columns(2)

                # Gr√°fico de Precipitaci√≥n
                with col3:
                    st.markdown("#### üåßÔ∏è Precipitaci√≥n")
                    fig_precip = go.Figure(go.Bar(
                        x=datos_climaticos_df['fecha'],
                        y=datos_climaticos_df['prec'],
                        marker_color='darkblue',
                        name='Precipitaci√≥n'
                    ))
                    fig_precip.update_layout(title="Precipitaci√≥n Acumulada", xaxis_title="Fecha", yaxis_title="mm")
                    st.plotly_chart(fig_precip, use_container_width=True)

                # Gr√°fico de Humedad Relativa
                with col4:
                    st.markdown("#### üíß Humedad Relativa")
                    fig_humidity = go.Figure(go.Scatter(
                        x=datos_climaticos_df['fecha'],
                        y=datos_climaticos_df['hrMedia'],
                        mode='lines',
                        line=dict(color='lightblue'),
                        name='Humedad Relativa'
                    ))
                    fig_humidity.update_layout(title="Humedad Relativa Media", xaxis_title="Fecha", yaxis_title="%")
                    st.plotly_chart(fig_humidity, use_container_width=True)

            with st.container():
                col5, col6 = st.columns(2)

                # Gr√°fico de Altitud
                with col5:
                    st.markdown("#### ‚õ∞Ô∏è Altitud")
                    fig_altitud = go.Figure(go.Scatter(
                        x=datos_climaticos_df['fecha'],
                        y=datos_climaticos_df['altitud'],
                        mode='lines',
                        line=dict(color='orange'),
                        name='Altitud'
                    ))
                    fig_altitud.update_layout(title="Altitud de la Ciudad", xaxis_title="Fecha",
                                              yaxis_title="m sobre el nivel del mar")
                    st.plotly_chart(fig_altitud, use_container_width=True)

                # Gr√°fico de Temperatura M√°xima y M√≠nima
                with col6:
                    st.markdown("#### üå°Ô∏è Temperaturas M√°ximas y M√≠nimas")
                    fig_temp_max_min = go.Figure()

                    # A√±adir temperatura m√°xima
                    fig_temp_max_min.add_trace(go.Scatter(
                        x=datos_climaticos_df['fecha'],
                        y=datos_climaticos_df['tmax'],
                        mode='lines',
                        name='Temperatura M√°xima',
                        line=dict(color='red', dash='solid')
                    ))

                    # A√±adir temperatura m√≠nima
                    fig_temp_max_min.add_trace(go.Scatter(
                        x=datos_climaticos_df['fecha'],
                        y=datos_climaticos_df['tmin'],
                        mode='lines',
                        name='Temperatura M√≠nima',
                        line=dict(color='blue', dash='solid')
                    ))

                    fig_temp_max_min.update_layout(title="Temperaturas M√°ximas y M√≠nimas", xaxis_title="Fecha",
                                                   yaxis_title="¬∞C")
                    st.plotly_chart(fig_temp_max_min, use_container_width=True)

            # Consultas avanzadas (m√°s m√©tricas)
            st.markdown("### üìä Consultas Avanzadas")
            queries = {
                "Temperaturas M√°xima y M√≠nima Diaria": f"""
                    SELECT fecha, MAX(tmax) AS max_temperature, MIN(tmin) AS min_temperature 
                    FROM valores_climatologicos 
                    WHERE ciudad_id = {ciudad_id} AND fecha BETWEEN '{fecha_inicio}' AND '{fecha_fin}'
                    GROUP BY fecha ORDER BY fecha;
                """,
                "Direcci√≥n del Viento Promedio": f"""
                    SELECT fecha, AVG(dir) AS average_wind_direction
                    FROM valores_climatologicos
                    WHERE ciudad_id = {ciudad_id} AND fecha BETWEEN '{fecha_inicio}' AND '{fecha_fin}'
                    GROUP BY fecha ORDER BY fecha;
                """,
                "Precipitaci√≥n Total Mensual": f"""
                    SELECT DATE_FORMAT(fecha, '%Y-%m') AS month, SUM(prec) AS total_precipitation 
                    FROM valores_climatologicos 
                    WHERE ciudad_id = {ciudad_id} AND fecha BETWEEN '{fecha_inicio}' AND '{fecha_fin}'
                    GROUP BY month ORDER BY month;
                """,
            }

            selected_query = st.selectbox("üîç Selecciona una consulta avanzada:", list(queries.keys()))
            data_avanzada = consulta_sql(queries[selected_query])

            if not data_avanzada.empty:
                fig_advanced = go.Figure()
                for col in data_avanzada.columns[1:]:
                    fig_advanced.add_trace(go.Scatter(
                        x=data_avanzada['fecha'],
                        y=data_avanzada[col],
                        mode='lines',
                        name=col
                    ))
                fig_advanced.update_layout(title=f"An√°lisis Avanzado - {selected_query}", xaxis_title="Fecha",
                                           yaxis_title="Valor")
                st.plotly_chart(fig_advanced, use_container_width=True)
        else:
            st.warning("‚ö†Ô∏è No se encontraron datos para el rango de fechas seleccionado.")

    if choice == "Facebook Prophet":


        # Configuraci√≥n de la p√°gina
        st.title("Predicciones Climatol√≥gicas")

        # T√≠tulos de la aplicaci√≥n
        st.subheader("Modelos Predictivos de Facebook Prophet")
        st.write("Cargue modelos preentrenados para realizar predicciones sobre los datos reales.")


        # Funci√≥n para cargar modelos .pkl
        def load_model(file_path):
            return load(file_path)

        # Carga de modelos
        models = {
            "Modelo Semestral": load_model("prophet_biannual.pkl"),
            "Modelo Trimestral": load_model("prophet_quarterly.pkl"),
            "Modelo Mensual": load_model("prophet_monthly.pkl"),
            "Modelo Semanal": load_model("prophet_weekly.pkl"),
            "Modelo Diario": load_model("prophet_daily.pkl")
        }

        # Input de datos reales (simulamos que provienen de una query)
        query1 = """
            SELECT fecha, tmed
            FROM valores_climatologicos
             """

        # Simulaci√≥n de datos obtenidos (reemplaza esto por tu extracci√≥n real de datos)
        data_real = consulta_sql(query1)
        st.image("https://estaticos-cdn.prensaiberica.es/clip/c086f7c2-e053-4e0a-889e-8bbb4f55197f_16-9-discover-aspect-ratio_default_0.webp",
                caption="Temperaturas Espa√±a",
                width=600  # Ajusta el ancho seg√∫n sea necesario
        )

        # Conversi√≥n al formato requerido por Prophet
        data_real.rename(columns={"fecha": "ds", "tmed": "y"}, inplace=True)

        # Selecci√≥n del modelo
        model_choice = st.selectbox(
            "Seleccione el modelo que desee utilizar:",
            list(models.keys())
        )

        times = {"Ma√±ana" : 1,
                 "Semana" : 7,
                 "Quincena" : 14,
                 "Mes" : 30}

        times_choice = st.selectbox("Seleccione el rango de tiempo que desee predecir:",
                                    list(times.keys()))

        st.write("**Predicci√≥n de la temperatura media de ma√±ana seg√∫n los distintos modelos.**",
                 )

        # Predicci√≥n con el modelo seleccionado
        if st.button("Predecir"):

            model = models[model_choice]  # Aseg√∫rate de que este es un modelo Prophet
            future = model.make_future_dataframe(periods=times[times_choice], freq='D')
            forecast = model.predict(future)
            st.write(f"**Temperatura para {times_choice} mediante el modelo  {model_choice}:**")
            forecast_reset = forecast[['ds', 'yhat']].tail(times[times_choice]).reset_index(drop=True)
            forecast_reset.index = range(1, len(forecast_reset) + 1)
            forecast_reset['yhat'] = forecast_reset['yhat'].round(2).astype(str) + " ¬∫C"
            forecast_reset['ds'] = forecast_reset['ds'].dt.date
            forecast_reset = forecast_reset.rename(columns={"ds": "Fecha", "yhat": "Temperatura media"})
            st.dataframe(forecast_reset[['Fecha', 'Temperatura media']].tail(times[times_choice]))

            st.write("**Gr√°fico de predicciones:**")

            # Crear el gr√°fico original
            fig = model.plot(forecast)

            # Obtener el eje actual del gr√°fico
            ax = fig.gca()

            # Definir la fecha l√≠mite entre datos reales y predicciones
            cutoff_date = data_real['ds'].max()

            # A√±adir una l√≠nea vertical para marcar la separaci√≥n
            ax.axvline(x=date2num(cutoff_date), color='red', linestyle='--', label='Fin datos reales')

            # Sombrear la zona de datos reales
            ax.axvspan(ax.get_xlim()[0], date2num(cutoff_date), color='lightblue', alpha=0.3, label='Datos reales')

            # Sombrear la zona de predicciones
            ax.axvspan(date2num(cutoff_date), ax.get_xlim()[1], color='lightgreen', alpha=0.3, label='Predicciones')


            # Agregar t√≠tulo y etiquetas
            ax.set_title(f"Predicci√≥n para {times_choice}")
            ax.set_xlabel("A√±os")
            ax.set_ylabel("Temperatura (¬∫C)")
            ax.legend()

            ax.legend()

            # Mostrar el gr√°fico original en Streamlit
            st.pyplot(fig)



            # GR√ÅFICO ZOOM: Crear un segundo gr√°fico para el zoom
            fig_zoom, ax_zoom = plt.subplots()

            # Convertir 'ds' a tipo datetime si es necesario
            forecast['ds'] = pd.to_datetime(forecast['ds'])

            # Asegurar que cutoff_date es de tipo datetime
            cutoff_date = pd.to_datetime(cutoff_date)

            # Filtrar los datos
            zoom_data = forecast[forecast['ds'] >= cutoff_date]

            # Graficar los datos con un enfoque en la zona de predicci√≥n
            ax_zoom.plot(forecast['ds'], forecast['yhat'], label='Predicci√≥n')
            ax_zoom.fill_between(
                forecast['ds'], forecast['yhat_lower'], forecast['yhat_upper'],
                color='gray', alpha=0.2, label='Intervalo de confianza'
            )

            # A√±adir la l√≠nea vertical y sombreado
            ax_zoom.axvline(x=date2num(cutoff_date), color='red', linestyle='--', label='Fin datos reales')
            ax_zoom.axvspan(date2num(cutoff_date), ax_zoom.get_xlim()[1], color='lightgreen', alpha=0.3,
                            label='Predicciones')

            # Configurar l√≠mites del eje X para enfocar en la zona de inter√©s
            ax_zoom.set_xlim([cutoff_date, forecast['ds'].max()])

            # Si las fechas son iguales, muestra solo un valor en el eje X
            if len(forecast['ds'].unique()) == 1:  # Si todas las fechas son iguales
                ax_zoom.set_xticks([forecast['ds'].min()])  # Solo una etiqueta
                ax_zoom.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))  # Formato de fecha
            else:
                ax_zoom.xaxis.set_major_locator(mdates.DayLocator())  # Para un rango mayor, usar DayLocator o similar
                ax_zoom.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))  # Formato de fecha

            # Ajustar la rotaci√≥n de las etiquetas del eje X
            fig_zoom.autofmt_xdate(rotation=45)  # Cambiar el √°ngulo de rotaci√≥n

            # Agregar t√≠tulo y etiquetas
            ax_zoom.set_title(f"Zoom en la zona de predicci√≥n para {times_choice}")
            ax_zoom.set_xlabel("Fecha")
            ax_zoom.set_ylabel("Temperatura (¬∫C)")
            ax_zoom.legend()

            # Mostrar el gr√°fico de zoom en Streamlit
            st.pyplot(fig_zoom)
    if choice=="Predicci√≥n del tiempo":

        scaler = joblib.load('scaler.pkl')

        # Funci√≥n para cargar el modelo
        @st.cache_resource
        def load_model_(model_path):
            return load_model(model_path)

        # Interfaz de usuario de Streamlit
        st.title('Predicci√≥n de la Temperatura')
        # Entrada de usuario
        estimated_temperature_tomorrow = st.number_input('Temperatura estimada de ma√±ana:', value=27)

        # Cargar el modelo al iniciar la aplicaci√≥n
        model_gru = load_model_('mi_modelo.keras')

        # Funci√≥n para predecir la temperatura
        def predict_temperature(model, input_data):
            input_data_scaled = scaler.transform(input_data.reshape(1, -1))
            predicted_temperature = model.predict(input_data_scaled)
            return scaler.inverse_transform(predicted_temperature.reshape(-1, 1))

        # Predecir datos con el modelo GRU
        if st.button('Predecir temperatura'):
            num_features = 1  # Cambia esto seg√∫n el n√∫mero de caracter√≠sticas de tu modelo
            input_data = np.array([[estimated_temperature_tomorrow] * num_features]).reshape(1, num_features)
            # Realizar la predicci√≥n
            try:
                predicted_temperature = predict_temperature(model_gru, input_data)
                st.success(f'Predicci√≥n de temperatura: {predicted_temperature[0][0]:.2f} ¬∞C')
            except Exception as e:
                st.error(f'Ocurri√≥ un error: {e}')

    if choice == "Mapa coropl√©tico":
        st.title("üìä Mapa Coropl√©tico: Hist√≥rico de Temperaturas Medias en Espa√±a")
        st.subheader("Explora las temperaturas medias de Espa√±a con filtros din√°micos.")
        st.info("""
            1. Filtra por a√±os, meses y provincias para ver las temperaturas medias en cada provincia.
            2. Un **mapa coropl√©tico** es una representaci√≥n geogr√°fica en la que las √°reas del mapa se colorean seg√∫n valores de una variable. En este caso, se visualizan las **temperaturas medias** de cada provincia, lo que te permite identificar patrones geogr√°ficos de temperatura a lo largo del tiempo.
            3. Puedes interactuar con el mapa, seleccionar diferentes fechas y provincias para obtener informaci√≥n precisa y detallada sobre el clima en cada regi√≥n.
        """)

        def crear_mapa_choropleth(geojson, df, color_column, fill_color, legend_name):
            mapa = folium.Map(location=[40.4168, -3.7038], zoom_start=6)
            folium.Choropleth(
                geo_data=geojson,
                data=df,
                columns=["provincia", color_column],
                key_on="feature.properties.name",
                fill_color=fill_color,  # Colores seg√∫n la temperatura
                fill_opacity=0.7,
                line_opacity=0.6,
                legend_name=legend_name,
            ).add_to(mapa)
            return mapa



        year = st.selectbox("Selecciona el a√±o:", [2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024])
        month = st.selectbox("Selecciona el mes:", [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])
        provincia_seek = st.selectbox("Selecciona la provincia:", [
            'STA. CRUZ DE TENERIFE', 'BARCELONA', 'SEVILLA', 'CUENCA', 'ZARAGOZA', 'ILLES BALEARS', 'VALENCIA',
            'ZAMORA', 'PALENCIA', 'CASTELLON', 'LAS PALMAS', 'MADRID', 'CANTABRIA', 'GRANADA', 'TERUEL', 'BADAJOZ',
            'A CORU√ëA', 'ASTURIAS', 'TARRAGONA', 'ALMERIA', 'ALICANTE', 'CADIZ', 'TOLEDO', 'BURGOS', 'GIRONA', 'MALAGA',
            'JAEN', 'MURCIA', 'LLEIDA', 'HUESCA', 'ALBACETE', 'NAVARRA', 'CORDOBA', 'OURENSE', 'CIUDAD REAL',
            'GIPUZKOA',
            'MELILLA', 'LEON', 'CACERES', 'SALAMANCA', 'HUELVA', 'LA RIOJA', 'BIZKAIA', 'GUADALAJARA', 'VALLADOLID',
            'ARABA/ALAVA', 'PONTEVEDRA', 'SEGOVIA', 'SORIA', 'AVILA', 'CEUTA', 'LUGO', 'BALEARES'
        ])

        # Query para obtener los datos filtrados
        query = f"""
            SELECT 
                DATE_FORMAT(t1.fecha, '%Y-%m') AS mes, 
                ROUND(AVG(t1.tmed), 2) AS media_tmed_mensual,
                t1.provincia_id, 
                t2.provincia 
            FROM 
                valores_climatologicos t1 
            RIGHT JOIN 
                provincias t2 ON t1.provincia_id = t2.provincia_id
            WHERE
                YEAR(t1.fecha) = {year}
                AND MONTH(t1.fecha) = {month}
                AND t2.provincia = '{provincia_seek}'
            GROUP BY 
                mes, t1.provincia_id, t2.provincia;
        """
        df = consulta_sql(query)

        # Cargar el archivo GeoJSON de las provincias espa√±olas
        with open("spain-provinces.geojson", "r", encoding="utf-8") as file:
            geojson_spain = json.load(file)

        # Mapeo de nombres de provincias
        map_provincia = {
            "STA. CRUZ DE TENERIFE": "Santa Cruz De Tenerife", "BARCELONA": "Barcelona",
            "SEVILLA": "Sevilla", "CUENCA": "Cuenca", "ZARAGOZA": "Zaragoza", "ILLES BALEARS": "Illes Balears",
            'VALENCIA': "Val√®ncia/Valencia", 'ZAMORA': "Zamora", 'PALENCIA': "Palencia",
            'CASTELLON': "Castell√≥/Castell√≥n", 'LAS PALMAS': "Las Palmas", 'MADRID': "Madrid",
            'CANTABRIA': "Cantabria", 'GRANADA': "Granada", 'TERUEL': "Teruel", 'BADAJOZ': "Badajoz",
            'A CORU√ëA': "A Coru√±a", 'ASTURIAS': "Asturias", 'TARRAGONA': "Tarragona", 'ALMERIA': "Almer√≠a",
            'ALICANTE': "Alacant/Alicante", 'CADIZ': "C√°diz", 'TOLEDO': "Toledo", 'BURGOS': "Burgos",
            'GIRONA': "Girona", 'MALAGA': "M√°laga", 'JAEN': "Ja√©n", 'MURCIA': "Murcia", 'LLEIDA': "Lleida",
            'HUESCA': "Huesca", 'ALBACETE': "Albacete", 'NAVARRA': "Navarra", 'CORDOBA': "C√≥rdoba",
            'OURENSE': "Ourense", 'CIUDAD REAL': "Ciudad Real", 'GIPUZKOA': "Gipuzkoa/Guip√∫zcoa", 'MELILLA': "Melilla",
            'LEON': "Le√≥n", 'CACERES': "C√°ceres", 'SALAMANCA': "Salamanca", 'HUELVA': "Huelva",
            'LA RIOJA': "La Rioja", 'BIZKAIA': "Bizkaia/Vizcaya", 'GUADALAJARA': "Guadalajara",
            'VALLADOLID': "Valladolid", 'ARABA/ALAVA': "Araba/√Ålava", 'PONTEVEDRA': "Pontevedra",
            'SEGOVIA': "Segovia", 'SORIA': "Soria", 'AVILA': "√Åvila", 'CEUTA': "Ceuta", 'LUGO': "Lugo",
            'BALEARES': "Illes Balears"
        }
        df["provincia"] = df["provincia"].map(map_provincia)

        # Visualizar la tabla con datos de temperaturas
        st.markdown("### Datos de temperaturas medias mensuales:")
        st.dataframe(df)

        # Crear y mostrar el mapa choropleth
        mapa_espana = crear_mapa_choropleth(geojson_spain, df, "media_tmed_mensual", "YlGnBu",
                                            "Temperatura Media Mensual (¬∞C)")
        st_folium(mapa_espana, width=725)

        def mostrar_grafico_temperatura(df, provincia, year, month):
            fig = px.bar(
                df,
                x="mes",
                y="media_tmed_mensual",
                title=f"Tendencia de Temperatura Media en {provincia} ({month}/{year})",
                labels={"mes": "Mes", "media_tmed_mensual": "Temperatura Media (¬∞C)"},
                text="media_tmed_mensual"
            )

            # Reducir el ancho de las barras
            fig.update_traces(texttemplate='%{text:.1f}', textposition='outside', width=0.4)

            # Ajustar tama√±o del gr√°fico y eliminar los textos del eje X
            fig.update_layout(
                width=400,  # Ancho del gr√°fico
                height=500,  # Altura del gr√°fico
                title=dict(font=dict(size=13)),  # Tama√±o de fuente del t√≠tulo
                xaxis=dict(
                    showticklabels=False,  # No mostrar las etiquetas en el eje X
                    showgrid= False  # Eliminar las l√≠neas de la cuadr√≠cula del eje X
                ),
                yaxis=dict(
                    showgrid=True  # Mostrar l√≠neas de cuadr√≠cula en el eje Y si lo deseas
                )
            )

            st.plotly_chart(fig)

        # Gr√°fico de tendencia de temperatura
        st.markdown("### Gr√°fico de Temperaturas Medias Mensuales:")
        mostrar_grafico_temperatura(df, provincia_seek, year, month)

        # Informaci√≥n adicional sobre la fecha seleccionada
        st.info("2. Mapa de Espa√±a con Temperaturas Medias Diarias.")

        # Selecci√≥n de fecha
        date = st.date_input("Selecciona una fecha", value=pd.to_datetime(f"2023-01-01"))
        dia = date.strftime('%Y-%m-%d')

        # Consulta para el clima en la fecha seleccionada
        query1 = f"""
            SELECT 
                t1.fecha, 
                ROUND(AVG(t1.tmed), 2) AS media_tmed, 
                t1.provincia_id, 
                t2.provincia 
            FROM 
                valores_climatologicos t1 
            RIGHT JOIN 
                provincias t2 ON t1.provincia_id = t2.provincia_id
            WHERE
                t1.fecha = "{date}"
            GROUP BY 
                t1.fecha, t1.provincia_id, t2.provincia;
        """
        df_daily = consulta_sql(query1)
        df_daily = df_daily[["fecha", "media_tmed", "provincia"]]
        df_daily["provincia"] = df_daily["provincia"].map(map_provincia)

        # Mostrar el gr√°fico interactivo para la fecha seleccionada
        st.write(f"### Temperatura Media para el d√≠a {dia}:")
        st.dataframe(df_daily)

        # Mapa interactivo de temperaturas diarias
        mapa_espana_daily = crear_mapa_choropleth(geojson_spain, df_daily, "media_tmed", "YlOrRd",
                                                  "Temperatura Media Diaria (¬∞C)")
        st_folium(mapa_espana_daily, width=725)

    if choice == "Predicci√≥n del tiempo":

        st.title("Predicci√≥n de Temperatura para ma√±ana")

        def cargar_modelos_y_escaladores():
            # Definir las carpetas para los modelos y los escaladores de cada tipo
            modelos = {'GRU': {}, 'RNN': {}, 'LSTM': {}}
            escaladores = {'GRU': {}, 'RNN': {}, 'LSTM': {}}

            # Directorios de los modelos y escaladores
            carpeta_gru_modelos = 'modelos_GRU'
            carpeta_rnn_modelos = 'modelos_RNN'
            carpeta_lstm_modelos = 'modelos_LSTM'
            carpeta_gru_scalers = 'scalers_GRU'
            carpeta_rnn_scalers = 'scalers_RNN'
            carpeta_lstm_scalers = 'scalers_LSTM'

            # Cargar modelos GRU
            for archivo in os.listdir(carpeta_gru_modelos):
                if archivo.endswith('.pkl') and 'modelo' in archivo:
                    indicativo = archivo.split('_')[1]
                    modelos['GRU'][indicativo] = joblib.load(os.path.join(carpeta_gru_modelos, archivo))

            # Cargar modelos RNN
            for archivo in os.listdir(carpeta_rnn_modelos):
                if archivo.endswith('.pkl') and 'modelo' in archivo:
                    indicativo = archivo.split('_')[1]
                    modelos['RNN'][indicativo] = joblib.load(os.path.join(carpeta_rnn_modelos, archivo))

            # Cargar modelos LSTM
            for archivo in os.listdir(carpeta_lstm_modelos):
                if archivo.endswith('.pkl') and 'modelo' in archivo:
                    indicativo = archivo.split('_')[1]
                    modelos['LSTM'][indicativo] = joblib.load(os.path.join(carpeta_lstm_modelos, archivo))

            # Cargar escaladores GRU
            for archivo in os.listdir(carpeta_gru_scalers):
                if archivo.endswith('.pkl') and 'scaler' in archivo:
                    indicativo = archivo.split('_')[1]
                    escaladores['GRU'][indicativo] = joblib.load(os.path.join(carpeta_gru_scalers, archivo))

            # Cargar escaladores RNN
            for archivo in os.listdir(carpeta_rnn_scalers):
                if archivo.endswith('.pkl') and 'scaler' in archivo:
                    indicativo = archivo.split('_')[1]
                    escaladores['RNN'][indicativo] = joblib.load(os.path.join(carpeta_rnn_scalers, archivo))

            # Cargar escaladores LSTM
            for archivo in os.listdir(carpeta_lstm_scalers):
                if archivo.endswith('.pkl') and 'scaler' in archivo:
                    indicativo = archivo.split('_')[1]
                    escaladores['LSTM'][indicativo] = joblib.load(os.path.join(carpeta_lstm_scalers, archivo))

            return modelos, escaladores

        # Funci√≥n para hacer la predicci√≥n
        def predecir(model, scaler, datos_entrada):
            # Escalar los datos de entrada
            datos_entrada_scaled = scaler.transform([datos_entrada])
            # Realizar la predicci√≥n
            prediccion = model.predict(datos_entrada_scaled)
            return prediccion[0]

        # Streamlit UI
        st.title('Predicci√≥n de Temperatura para el Siguiente D√≠a')

        # Ingreso de datos para hacer la predicci√≥n
        st.header('Ingresa los datos para la predicci√≥n')

        # Entradas del usuario
        tmed = st.number_input('Temperatura media actual (tmed)', value=25.0)
        prec = st.number_input('Precipitaci√≥n (prec)', value=0.0)
        tmin = st.number_input('Temperatura m√≠nima (tmin)', value=18.0)
        tmax = st.number_input('Temperatura m√°xima (tmax)', value=30.0)
        dir = st.number_input('Direcci√≥n del viento (dir)', value=180)
        velemedia = st.number_input('Velocidad media del viento (velemedia)', value=5.0)
        hrMedia = st.number_input('Humedad relativa media (hrMedia)', value=60.0)
        hrMax = st.number_input('Humedad relativa m√°xima (hrMax)', value=80.0)

        # Bot√≥n para realizar la predicci√≥n
        if st.button('Predecir Temperatura para Ma√±ana'):
            # Cargar modelos y escaladores desde las carpetas correspondientes
            modelos, escaladores = cargar_modelos_y_escaladores()

            # Si no hay modelos disponibles, mostrar mensaje de error
            if not modelos:
                st.error("No se encontraron modelos disponibles.")
            else:
                # Seleccionar el tipo de modelo (GRU, RNN, LSTM)
                tipo_modelo = st.selectbox('Selecciona el tipo de modelo', ['GRU', 'RNN', 'LSTM'])

                # Seleccionar el indicativo
                indicativos = list(modelos[tipo_modelo].keys())
                indicativo = st.selectbox('Selecciona el Indicativo', indicativos)

                # Cargar el modelo y el escalador correspondientes al indicativo seleccionado
                model = modelos[tipo_modelo][indicativo]
                scaler = escaladores[tipo_modelo][indicativo]

                # Crear un arreglo con los datos ingresados
                datos_entrada = np.array([tmed, prec, tmin, tmax, dir, velemedia, hrMedia, hrMax])

                # Realizar la predicci√≥n
                prediccion = predecir(model, scaler, datos_entrada)

                # Mostrar la predicci√≥n
                st.write(f'La predicci√≥n de temperatura media para ma√±ana es: {prediccion:.2f} ¬∞C')

    if choice == "Facebook Prophet":

        # Configuraci√≥n de la p√°gina
        st.title("Predicciones Climatol√≥gicas")

        # T√≠tulos de la aplicaci√≥n
        st.subheader("Modelos Predictivos de Facebook Prophet")
        st.write("Cargue modelos preentrenados para realizar predicciones sobre los datos reales.")

        # Funci√≥n para cargar modelos .pkl
        def load_model(file_path):
            return load(file_path)

        # Carga de modelos
        models = {
            "Modelo Semestral": load_model("prophet_biannual.pkl"),
            "Modelo Trimestral": load_model("prophet_quarterly.pkl"),
            "Modelo Mensual": load_model("prophet_monthly.pkl"),
            "Modelo Semanal": load_model("prophet_weekly.pkl"),
            "Modelo Diario": load_model("prophet_daily.pkl")
        }

        # Input de datos reales (simulamos que provienen de una query)
        query1 = """
               SELECT fecha, tmed
               FROM valores_climatologicos
                """

        # Simulaci√≥n de datos obtenidos (reemplaza esto por tu extracci√≥n real de datos)
        data_real = consulta_sql(query1)
        st.image(
            "https://estaticos-cdn.prensaiberica.es/clip/c086f7c2-e053-4e0a-889e-8bbb4f55197f_16-9-discover-aspect-ratio_default_0.webp",
            caption="Temperaturas Espa√±a",
            width=600  # Ajusta el ancho seg√∫n sea necesario
            )

        # Conversi√≥n al formato requerido por Prophet
        data_real.rename(columns={"fecha": "ds", "tmed": "y"}, inplace=True)

        # Selecci√≥n del modelo
        model_choice = st.selectbox(
            "Seleccione el modelo que desee utilizar:",
            list(models.keys())
        )

        times = {"Ma√±ana": 1,
                 "Semana": 7,
                 "Quincena": 14,
                 "Mes": 30}

        times_choice = st.selectbox("Seleccione el rango de tiempo que desee predecir:",
                                    list(times.keys()))

        st.write("**Predicci√≥n de la temperatura media de ma√±ana seg√∫n los distintos modelos.**",
                 )

        # Predicci√≥n con el modelo seleccionado
        if st.button("Predecir"):

            model = models[model_choice]  # Aseg√∫rate de que este es un modelo Prophet
            future = model.make_future_dataframe(periods=times[times_choice], freq='D')
            forecast = model.predict(future)
            st.write(f"**Temperatura para {times_choice} mediante el modelo  {model_choice}:**")
            forecast_reset = forecast[['ds', 'yhat']].tail(times[times_choice]).reset_index(drop=True)
            forecast_reset.index = range(1, len(forecast_reset) + 1)
            forecast_reset['yhat'] = forecast_reset['yhat'].round(2).astype(str) + " ¬∫C"
            forecast_reset['ds'] = forecast_reset['ds'].dt.date
            forecast_reset = forecast_reset.rename(columns={"ds": "Fecha", "yhat": "Temperatura media"})
            st.dataframe(forecast_reset[['Fecha', 'Temperatura media']].tail(times[times_choice]))

            st.write("**Gr√°fico de predicciones:**")

            # Crear el gr√°fico original
            fig = model.plot(forecast)

            # Obtener el eje actual del gr√°fico
            ax = fig.gca()

            # Definir la fecha l√≠mite entre datos reales y predicciones
            cutoff_date = data_real['ds'].max()

            # A√±adir una l√≠nea vertical para marcar la separaci√≥n
            ax.axvline(x=date2num(cutoff_date), color='red', linestyle='--', label='Fin datos reales')

            # Sombrear la zona de datos reales
            ax.axvspan(ax.get_xlim()[0], date2num(cutoff_date), color='lightblue', alpha=0.3, label='Datos reales')

            # Sombrear la zona de predicciones
            ax.axvspan(date2num(cutoff_date), ax.get_xlim()[1], color='lightgreen', alpha=0.3, label='Predicciones')

            # Agregar t√≠tulo y etiquetas
            ax.set_title(f"Predicci√≥n para {times_choice}")
            ax.set_xlabel("A√±os")
            ax.set_ylabel("Temperatura (¬∫C)")
            ax.legend()

            ax.legend()

            # Mostrar el gr√°fico original en Streamlit
            st.pyplot(fig)

            # GR√ÅFICO ZOOM: Crear un segundo gr√°fico para el zoom
            fig_zoom, ax_zoom = plt.subplots()

            # Convertir 'ds' a tipo datetime si es necesario
            forecast['ds'] = pd.to_datetime(forecast['ds'])

            # Asegurar que cutoff_date es de tipo datetime
            cutoff_date = pd.to_datetime(cutoff_date)

            # Filtrar los datos
            zoom_data = forecast[forecast['ds'] >= cutoff_date]

            # Graficar los datos con un enfoque en la zona de predicci√≥n
            ax_zoom.plot(forecast['ds'], forecast['yhat'], label='Predicci√≥n')
            ax_zoom.fill_between(
                forecast['ds'], forecast['yhat_lower'], forecast['yhat_upper'],
                color='gray', alpha=0.2, label='Intervalo de confianza'
            )

            # A√±adir la l√≠nea vertical y sombreado
            ax_zoom.axvline(x=date2num(cutoff_date), color='red', linestyle='--', label='Fin datos reales')
            ax_zoom.axvspan(date2num(cutoff_date), ax_zoom.get_xlim()[1], color='lightgreen', alpha=0.3,
                            label='Predicciones')

            # Configurar l√≠mites del eje X para enfocar en la zona de inter√©s
            ax_zoom.set_xlim([cutoff_date, forecast['ds'].max()])

            # Si las fechas son iguales, muestra solo un valor en el eje X
            if len(forecast['ds'].unique()) == 1:  # Si todas las fechas son iguales
                ax_zoom.set_xticks([forecast['ds'].min()])  # Solo una etiqueta
                ax_zoom.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))  # Formato de fecha
            else:
                ax_zoom.xaxis.set_major_locator(mdates.DayLocator())  # Para un rango mayor, usar DayLocator o similar
                ax_zoom.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))  # Formato de fecha

            # Ajustar la rotaci√≥n de las etiquetas del eje X
            fig_zoom.autofmt_xdate(rotation=45)  # Cambiar el √°ngulo de rotaci√≥n

            # Agregar t√≠tulo y etiquetas
            ax_zoom.set_title(f"Zoom en la zona de predicci√≥n para {times_choice}")
            ax_zoom.set_xlabel("Fecha")
            ax_zoom.set_ylabel("Temperatura (¬∫C)")
            ax_zoom.legend()

            # Mostrar el gr√°fico de zoom en Streamlit
            st.pyplot(fig_zoom)
    if choice == "Diagrama MYSQL: Base de datos":
        st.image(image="Esquema_AEMET.png",
                 caption="Esquema de la base de datos AEMET",
                 use_column_width=True)

        st.subheader("Esquema base de datos AEMET:")
        st.write("""El esquema de esta base de datos consta de 4 tablas de datos en la que la principal ser√≠a la tabla llamada valores climatol√≥gicos y de la que surgen otras tres tablas llamadas indicativo, ciudades y provincias."
                                "En la tabla principal podemos encontrar los siguientes datos:

                   Fecha: recoge la fecha de medici√≥n de los valores climatol√≥gicos.

                   Altitud: altitud de medici√≥n de estos valores.

                   Tmed: temperatura media recogida durante el d√≠a en grados cent√≠grados.

                   Prec: precipitaciones acumuladas en mil√≠metros, que equivale a un 1 litro de agua por metro cuadrado."

                   Tmin: temperatura m√≠nima registrada en el d√≠a.

                   HoraTmin: registro de hora de temperatura m√≠nima.

                   Tmax: temperatura m√°xima registrada en el d√≠a.

                   HoraTmax: registro de hora de temperatura m√°xima.

                   Dir: direccional predominante del viento, expresada en grados (0¬∞-360¬∞) o en puntos cardinales (N, NE, E, etc.). Esto se√±ala de d√≥nde viene el viento, no hacia d√≥nde va.

                   Velemedia: se refiere a la velocidad media del viento, expresada generalmente en kil√≥metros por hora (km/h) o metros por segundo (m/s). Este valor representa la velocidad promedio del viento registrada en el d√≠a.

                   Racha: se refiere a la racha m√°xima de viento, que es la mayor velocidad instant√°nea del viento registrada en un periodo determinado.

                   Horaracha: registro de hora de Racha.

                   HrMedia: Humedad relativa media del d√≠a.

                   HrMax: Humedad m√°xima registrada en el d√≠a.

                   HoraHrMax: Hora de registro de la humedad m√°xima.

                   HrMin: Humedad m√≠nima registrada en el d√≠a.

                   HoraHrMin: Hora de registro de la humedad m√≠nima.

                   Indicativo_id: √≠ndice asignado al valor indicativo de estaci√≥n meteorol√≥gica.

                   Ciudad_id: √≠ndice asignado al valor ciudad.

                   Provincia_id: √≠ndice asignado al valor provincia.""")

    if choice == "About us":
        st.title("üì¨ **Contacto y Desarrolladores**")
        st.subheader(
            "Este proyecto ha sido desarrollado por los alumnos del curso de Data Science & IA. A continuaci√≥n, encontrar√°s los datos de contacto.")

        # Establecer el tama√±o de las im√°genes (m√°s peque√±as para un dise√±o m√°s elegante)
        size = (250, 250)  # Imagen m√°s peque√±a y profesional

        # Cargar las im√°genes de los miembros del equipo
        estela_img = Image.open("Estela.jpeg").resize(size)
        pablo_img = Image.open("Pablo Petidier.jpeg").resize(size)

        # Crear dos columnas
        col1, col2 = st.columns(2)

        # Primera columna (Estela)
        with col1:
            st.image(estela_img, caption="Estela Mojena √Åvila", use_column_width=False)
            st.markdown("**Estela Mojena √Åvila**")
            st.markdown("**üìß Correo Electr√≥nico:** [estelamojenaavila@gmail.com](mailto:estelamojenaavila@gmail.com)")
            st.markdown("**üìû Tel√©fono:** [+34 622 68 33 95](tel:+34622683395)")
            st.markdown("**üíº LinkedIn:** [Estela Mojena √Åvila](https://www.linkedin.com/in/estela-mojena-avila/)")
            st.markdown("**üíª GitHub:** [Estela8](https://github.com/Estela8)")

        # Segunda columna (Pablo)
        with col2:
            st.image(pablo_img, caption="Pablo Petidier Smit", use_column_width=False)
            st.markdown("**Pablo Petidier Smit**")
            st.markdown("**üìß Correo Electr√≥nico:** [petidiersmit@gmail.com](mailto:petidiersmit@gmail.com)")
            st.markdown("**üìû Tel√©fono:** [+34 624 10 85 03](tel:+34624108503)")
            st.markdown("**üíº LinkedIn:** [Pablo Petidier Smit](https://www.linkedin.com/in/pablopetidier/)")
            st.markdown("**üíª GitHub:** [ppswns1988](https://github.com/ppswns1988)")

        # Espacio adicional para separar la informaci√≥n
        st.markdown("---")

        # Descripci√≥n del proyecto de manera breve
        st.markdown("""
        **Descripci√≥n del Proyecto:**  
        Este proyecto ha sido desarrollado como parte del curso de Data Science & IA. Su objetivo es proporcionar un an√°lisis interactivo y visual de datos clim√°ticos hist√≥ricos, permitiendo a los usuarios explorar el clima de diferentes ciudades y provincias a lo largo del tiempo.

        **Objetivos del Proyecto:**  
        - Visualizaci√≥n de datos clim√°ticos hist√≥ricos (temperaturas, precipitaci√≥n, viento, humedad).
        - Provisi√≥n de herramientas de an√°lisis interactivo para el usuario.
        - Desarrollo y despliegue de un proyecto basado en Python y Streamlit.

        **Tecnolog√≠as Utilizadas:**  
        - **Python**: para procesamiento de datos.
        - **Streamlit**: para la creaci√≥n de interfaces web interactivas.
        - **Plotly**: para gr√°ficos interactivos.
        - **MySQL**: como base de datos para almacenar la informaci√≥n clim√°tica.

        **Fecha de Creaci√≥n:** Octubre 2024
        """)

        st.markdown("---")

        # Agradecimiento y Cierre
        st.markdown("""
        **Agradecimientos:**  
        Agradecemos el apoyo recibido durante el curso de Data Science & IA, as√≠ como a todos aquellos que contribuyeron al desarrollo y mejora de este proyecto.

        Si tienes alguna duda o deseas ponerte en contacto con nosotros, no dudes en escribirnos a trav√©s de los correos electr√≥nicos proporcionados.

        """)


if __name__ == "__main__":
    main()